"""
A stack that creates and populates a S3 bucket with
a parquet file per outcode.

Each file contains a list of ballots per UK address (from AddressBase).

This is generated from the AddressBase stack geo-joined with a CSV of
current elections.

The list of current elections is generated by EE. An update to that
list will trigger a re-build of this data package.

"""

from typing import List

import aws_cdk.aws_lambda_python_alpha as aws_lambda_python
from aws_cdk import (
    Duration,
    aws_lambda,
)
from aws_cdk import (
    aws_iam as iam,
)
from aws_cdk import aws_stepfunctions as sfn
from aws_cdk import aws_stepfunctions_tasks as tasks
from constructs import Construct
from shared_components.buckets import (
    data_baker_results_bucket,
    ee_data_cache_production,
)
from shared_components.models import GlueTable, S3Bucket
from shared_components.tables import (
    current_ballots,
    current_ballots_joined_to_address_base,
)
from stacks.base_stack import DataBakerStack


class CurrentElectionsStack(DataBakerStack):
    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        uprn_to_ballots_first_letter_function = (
            aws_lambda_python.PythonFunction(
                self,
                "uprn_to_ballots_first_letter_function",
                function_name="uprn_to_ballots_first_letter_function",
                runtime=aws_lambda.Runtime.PYTHON_3_12,
                handler="handler",
                entry="cdk/stacks/current_elections/lambdas/",
                index="uprn_to_ballots_first_letter.py",
                timeout=Duration.seconds(900),
            )
        )

        uprn_to_ballots_first_letter_function.add_to_role_policy(
            iam.PolicyStatement(
                actions=[
                    "athena:*",
                    "s3:*",
                    "glue:*",
                ],
                resources=["*"],
            )
        )

        # first_letter_fan_out = aws_lambda_python.PythonFunction(
        #     self,
        #     "first_letter_fan_out",
        #     function_name="first_letter_fan_out",
        #     runtime=aws_lambda.Runtime.PYTHON_3_12,
        #     handler="handler",
        #     entry="cdk/stacks/current_elections/lambdas/",
        #     index="first_letter_fan_out.py",
        #     timeout=Duration.seconds(900),
        # )

        # join_addressbase_to_current_ballots = tasks.LambdaInvoke(
        #     self,
        #     "Run Athena Query",
        #     lambda_function=uprn_to_ballots_first_letter_function,
        #     result_path="$.athena_result",
        # )

        # wait_for_query = sfn.Wait(
        #     self,
        #     "WaitForQuery",
        #     time=sfn.WaitTime.duration(Duration.minutes(1)),
        # )
        #
        # check_query_status = tasks.LambdaInvoke(
        #     self,
        #     "Check Query Status",
        #     lambda_function=uprn_to_ballots_first_letter_function,
        #     result_path="$.query_status",
        # )

        # Fan-out step (for each letter A-Z)
        parallel_execution = sfn.Parallel(self, "Fan Out Letters")
        alphabet = [chr(i) for i in range(ord("A"), ord("Z") + 1)]
        for letter in alphabet:
            parallel_execution.branch(
                tasks.LambdaInvoke(
                    self,
                    f"Process {letter}",
                    lambda_function=uprn_to_ballots_first_letter_function,
                    payload=sfn.TaskInput.from_object({"first_letter": letter}),
                    result_path=f"$.fanout_result.{letter}",
                )
            )

        definition = (
            # join_addressbase_to_current_ballots.next(wait_for_query)
            # .next(check_query_status)
            # .next(
            #     sfn.Choice(self, "Joined EE to AddressBase?")
            #     .when(
            #         sfn.Condition.string_equals(
            #             "$.query_status.Payload.status", "SUCCEEDED"
            #         ),
            #         parallel_execution,
            #     )
            #     .otherwise(wait_for_query)
            # )
            parallel_execution
        )

        sfn.StateMachine(
            self,
            "AthenaStepFunction",
            definition=definition,
            timeout=Duration.minutes(10),
        )

    @staticmethod
    def glue_tables() -> List[GlueTable]:
        return [current_ballots, current_ballots_joined_to_address_base]

    @staticmethod
    def s3_buckets() -> List[S3Bucket]:
        return [ee_data_cache_production, data_baker_results_bucket]
